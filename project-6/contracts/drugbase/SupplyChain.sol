pragma solidity ^0.4.24;

import "../drugcore/Ownable.sol";
import "../drugaccesscontrol/ManufacturerRole.sol";
import "../drugaccesscontrol/DistributorRole.sol";
import "../drugaccesscontrol/InspectorRole.sol";
import "../drugaccesscontrol/BuyerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is 
  Ownable,
  ManufacturerRole,
  DistributorRole,
  InspectorRole,
  BuyerRole
  
{

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'drugs' that maps the UPC to an Item.
  mapping (uint => Drug) drugs;

  // Define a public mapping 'drugsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) drugsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Created,   // 0
    Packed,    // 1
    Tagged,    // 2
    Audited,   // 3
    ForSale,   // 4
    Sold      // 5
  }

  State constant defaultState = State.Created;

  // Define a struct 'Item' with the following fields:
  struct Drug {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 6 stages
    address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
    string  originManufacturerName; // Farmer Name Name
    string  originManufacturerInformation;  // Farmer Information
    string  originManufacturerLatitude; // Farm Latitude
    string  originManufacturerLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address inspectorID;  // Metamask-Ethereum address of the Inspector
    address distributorID; // Metamask-Ethereum address of the Distributor
    address buyerID; // Metamask-Ethereum address of the Buyer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Created(uint upc);
  event Packed(uint upc);
  event Tagged(uint upc);
  event Audited(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  


  // Define a modifer that verifies the Caller
  modifier verifyCaller(address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = drugs[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    drugs[_upc].buyerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Created
  modifier isCreated(uint _upc) {
    require(drugs[_upc].itemState == State.Created);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Tagged
    modifier isPacked(uint _upc) {
      require(drugs[_upc].itemState == State.Packed);
      _;
  }

  // Define a modifier that checks if an item.state of a upc is Tagged
  modifier isTagged(uint _upc) {
    require(drugs[_upc].itemState == State.Tagged);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Audited
  modifier isAudited(uint _upc) {
    require(drugs[_upc].itemState == State.Audited);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier isForSale(uint _upc) {
    require(drugs[_upc].itemState == State.ForSale);
    _;
  }



  // Define a modifier that checks if an item.state of a upc is Sold
  modifier isSold(uint _upc) {
    require(drugs[_upc].itemState == State.Sold);
    _;
  }
  
 
  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public onlyOwner {
    selfdestruct(owner());
  }

  // Define a function 'CreateDrug' that allows a manufacturer to mark an item 'Created'
  function createDrug(uint _upc, address _originManufacturerID, string _originManufacturerName, string _originManufacturerInformation, string  _originManufacturerLatitude, string  _originManufacturerLongitude, string  _productNotes) public 
  onlyManufacturer
  {
    // Add the new item as part of Harvest
    drugs[_upc] = Drug({
        sku: sku,
        upc: _upc,
        ownerID: msg.sender,
        originManufacturerID: _originManufacturerID,
        originManufacturerName: _originManufacturerName,
        originManufacturerInformation: _originManufacturerInformation,
        originManufacturerLatitude: _originManufacturerLatitude,
        originManufacturerLongitude: _originManufacturerLongitude,
        productID: sku + _upc,
        productNotes: _productNotes,
        productPrice: 0,
        itemState: State.Created,
        inspectorID: address(0), 
        buyerID: address(0),
        distributorID: address(0)
    });
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Created(_upc);
  }

  // Define a function 'packDrug' that allows a manufacturer to mark an item 'Packed'
  function packDrug(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  isCreated(_upc)
  // Call modifier to verify caller of this function
  onlyManufacturer
  {
    // Update the appropriate fields
    drugs[_upc].ownerID = msg.sender;
    drugs[_upc].itemState = State.Packed;
    drugs[_upc].productPrice = _price;
    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'tagDrug' that allows a manufacturer to mark an item 'Tagged'
  function tagDrug(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  isPacked(_upc)
  // Call modifier to verify caller of this function
  onlyManufacturer
  {
    // Update the appropriate fields
    drugs[_upc].ownerID = msg.sender;
    drugs[_upc].itemState = State.Tagged;
    // Emit the appropriate event
    emit Tagged(_upc);
  }

  // Define a function 'auditDrug' that allows a farmer to mark an item 'Audited'
  function auditDrug(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  isTagged(_upc)
  // Call modifier to verify caller of this function
  onlyInspector
  {
    // Update the appropriate fields
    drugs[_upc].ownerID = msg.sender;
    drugs[_upc].inspectorID = msg.sender;
    drugs[_upc].itemState = State.Audited;
    // Emit the appropriate event
    emit Audited(_upc);
  }

  // Define a function 'distributeDrug' that allows the distributor to mark an item 'ForSale'
  // Use the above modifers to check if the item is Audited
  function distributeDrug(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    isAudited(_upc)
    // Call modifier to verify caller of this function
    onlyDistributor
    {
    // Update the appropriate fields
    drugs[_upc].ownerID = msg.sender;
    drugs[_upc].distributorID = msg.sender;
    drugs[_upc].itemState = State.ForSale;
    // Emit the appropriate event
    emit ForSale(_upc);
    
  }

  // Define a function 'buyDrug' that allows the retailer to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyDrug(uint _upc) public payable 
    onlyBuyer
    // Call modifier to check if upc has passed previous supply chain stage
    isForSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(drugs[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    {
    // Update the appropriate fields - ownerID, itemState
    drugs[_upc].ownerID = msg.sender;
    drugs[_upc].buyerID = msg.sender;
    drugs[_upc].itemState = State.Sold;
    uint256 price = drugs[_upc].productPrice;
    // Transfer money to Manufacturer
    drugs[_upc].originManufacturerID.transfer(price);
    // emit the appropriate event
    emit Sold(_upc);
  }



  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originManufacturerID,
  string  originManufacturerName,
  string  originManufacturerInformation,
  string  originManufacturerLatitude,
  string  originManufacturerLongitude
  ) 
  {
  // Assign values to the 8 parameters
    itemSKU = drugs[_upc].sku;
    itemUPC = drugs[_upc].upc;
    ownerID = drugs[_upc].ownerID;
    originManufacturerID = drugs[_upc].originManufacturerID;
    originManufacturerName = drugs[_upc].originManufacturerName;
    originManufacturerInformation =  drugs[_upc].originManufacturerInformation;
    originManufacturerLatitude = drugs[_upc].originManufacturerLatitude;
    originManufacturerLongitude = drugs[_upc].originManufacturerLongitude;
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originManufacturerID,
  originManufacturerName,
  originManufacturerInformation,
  originManufacturerLatitude,
  originManufacturerLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address manufacturerID,
  address distributorID,
  address inspectorID,
  address buyerID
  ) 
  {
    // Assign values to the 9 parameters
    itemSKU = drugs[_upc].sku;
    itemUPC = drugs[_upc].upc;
    productID = drugs[_upc].productID;
    productNotes = drugs[_upc].productNotes;
    productPrice = drugs[_upc].productPrice;
    itemState =  uint256(drugs[_upc].itemState);
    manufacturerID = drugs[_upc].originManufacturerID;
    distributorID = drugs[_upc].distributorID;
    inspectorID = drugs[_upc].inspectorID;
    buyerID = drugs[_upc].buyerID;
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  manufacturerID,
  distributorID,
  inspectorID,
  buyerID
  );
  }
}
